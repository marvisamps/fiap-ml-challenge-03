"""
Agendador de Sincroniza√ß√µes Peri√≥dicas com Firestore
Executa sincroniza√ß√£o em intervalos regulares (cron-like)
"""
import os
import time
import schedule
import logging
from pathlib import Path
from data.firestore_direct import FirestoreSync
import signal
import sys
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configura√ß√£o
SERVICE_ACCOUNT_PATH = os.getenv('FIREBASE_SERVICE_ACCOUNT_PATH', 'serviceAccountKey.json')
SYNC_INTERVAL_MINUTES = int(os.getenv('FIRESTORE_SYNC_INTERVAL', '5'))  # padr√£o: 5 minutos

# Controle de shutdown
shutdown_flag = False

def signal_handler(sig, frame):
    """Handler para shutdown gracioso"""
    global shutdown_flag
    logger.info("üõë Recebido sinal de parada. Encerrando...")
    shutdown_flag = True

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


class FirestoreScheduler:
    """Agendador de sincroniza√ß√µes peri√≥dicas"""
    
    def __init__(self, service_account_path: str, interval_minutes: int = 5):
        self.sync = FirestoreSync(service_account_path)
        self.interval_minutes = interval_minutes
        self.total_synced = 0
        self.sync_count = 0
    
    def sync_job(self):
        """Job de sincroniza√ß√£o"""
        if not self.sync.is_connected():
            logger.error("‚ùå N√£o conectado ao Firestore. Pulando sincroniza√ß√£o...")
            return
        
        try:
            logger.info(f"üîÑ Iniciando sincroniza√ß√£o #{self.sync_count + 1}...")
            count = self.sync.sync_to_jsonl()
            
            self.total_synced += count
            self.sync_count += 1
            
            logger.info(f"‚úÖ Sincroniza√ß√£o #{self.sync_count} completa!")
            logger.info(f"   üìä Eventos desta sync: {count}")
            logger.info(f"   üìä Total sincronizado: {self.total_synced}")
            logger.info(f"   ‚è∞ Pr√≥xima sync em {self.interval_minutes} minutos")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na sincroniza√ß√£o: {e}")
    
    def start(self):
        """Inicia o agendador"""
        if not self.sync.is_connected():
            logger.error("‚ùå N√£o foi poss√≠vel conectar ao Firestore!")
            logger.info("Verifique se o serviceAccountKey.json est√° configurado corretamente")
            sys.exit(1)
        
        logger.info("=" * 60)
        logger.info("üìÖ AGENDADOR DE SINCRONIZA√á√ïES FIRESTORE")
        logger.info("=" * 60)
        logger.info(f"üì° Firestore: Conectado")
        logger.info(f"‚è∞ Intervalo: A cada {self.interval_minutes} minutos")
        logger.info("=" * 60)
        
        # Executar primeira sincroniza√ß√£o imediatamente
        logger.info("üöÄ Executando primeira sincroniza√ß√£o...")
        self.sync_job()
        
        # Agendar sincroniza√ß√µes peri√≥dicas
        schedule.every(self.interval_minutes).minutes.do(self.sync_job)
        
        logger.info("=" * 60)
        logger.info("‚úÖ Agendador iniciado!")
        logger.info("   (Pressione Ctrl+C para parar)")
        logger.info("=" * 60)
        
        # Loop principal
        try:
            while not shutdown_flag:
                schedule.run_pending()
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë Interrompido pelo usu√°rio")
        
        logger.info("=" * 60)
        logger.info(f"üìä ESTAT√çSTICAS FINAIS")
        logger.info(f"   Sincroniza√ß√µes executadas: {self.sync_count}")
        logger.info(f"   Total de eventos: {self.total_synced}")
        logger.info("=" * 60)
        logger.info("üëã Agendador encerrado")


def main():
    """Fun√ß√£o principal"""
    
    # Verificar se service account existe
    if not Path(SERVICE_ACCOUNT_PATH).exists():
        logger.error("=" * 60)
        logger.error("‚ùå ERRO: Service Account Key n√£o encontrado!")
        logger.error("=" * 60)
        logger.error(f"üìÅ Esperado em: {SERVICE_ACCOUNT_PATH}")
        logger.error("")
        logger.error("üìù Como configurar:")
        logger.error("1. Baixe o serviceAccountKey.json do Firebase Console")
        logger.error("2. Coloque na raiz do projeto")
        logger.error("3. Configure no .env: FIREBASE_SERVICE_ACCOUNT_PATH=serviceAccountKey.json")
        logger.error("=" * 60)
        sys.exit(1)
    
    # Iniciar agendador
    scheduler = FirestoreScheduler(SERVICE_ACCOUNT_PATH, SYNC_INTERVAL_MINUTES)
    scheduler.start()


if __name__ == "__main__":
    main()

